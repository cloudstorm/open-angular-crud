/ CloudStorm Form component
/ Can be used on its own or be generated by a CSWizard
/ Iterates over the fields of a form and renders CSField components for each field

.form-header{ "ng-switch" => "csFormOptions['form-mode']" }
  %h3{ "ng-switch-when" => "create" }
    {{i18n.t('new')}} {{formResource.descriptor.name}}
  %span{ "ng-switch-when" => "edit" }
    %h4.divided
      {{editableItem.$display_name()}}
  %span{ "ng-switch-when" => "show" }
    %h4.divided
      {{editableItem.$display_name()}}
%form{ "name" => "csForm",
       "novalidate" => "",
       "ng-transclude" => "fields" }
  %cs-field.form-group.field{ "ng-repeat" => "field in fields track by $index",
                              "form-item" => "editableItem",
                              "field" => "field",
                              "form-mode" => "formMode",
                              "cs-field-options" => "csFormOptions",
                              "descriptor" => "childDescriptors['csField']",
                              "create-resources" => "createResources()",
                              "ng-show" => "isFieldVisible(field.attribute)" }

.form-group.form-actions{ "ng-transclude" => "actions",
                          "ng-if" => "formMode != 'show'" }
  .actions-inner
    .btn-tooltip-wrapper{ "uib-tooltip" => "{{i18n.t('validation_text')}}",
                          "tooltip-placement" => "right",
                          "tooltip-trigger" => "mouseenter",
                          "tooltip-enable"=> "csForm.$invalid" }

      %button.btn.btn-success{ "ng-class" => "{'disabled': csForm.$invalid}",
                               "ng-click" => "submit()",
                               "type" => "button" }
        {{ i18n.t('buttons.submit') }}

    %button.btn.btn-link{ "ng-click" => "cancel()",
                          "type" => "button",
                          "ng-switch" => "csFormOptions['form-mode']" }

      %span{ "ng-switch-when" => "create" }
        {{ i18n.t('buttons.close') }}

      %span{ "ng-switch-default" => "" }
        {{ i18n.t('buttons.cancel') }}

    %span.help-block{ "ng-if" => "field.errors.length > 0" }

    .checkbox.create-another{ "ng-if" => "formMode == 'create' && wizardPanelIndex == 0" }
      %label
        %input{ "ng-model" => "csFormOptions['keep-first']",
                "type" => "checkbox" }
          {{ i18n.t('create_another') }}
